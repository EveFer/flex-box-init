body {
    box-sizing: border-box;
    margin: 0;
    background: #ff9966;
    background: -webkit-linear-gradient(to right, #ff5e62, #ff9966);
    background: linear-gradient(to right, #ff5e62, #ff9966);
}

.contenedor {
    background-color: white;
    height: calc(100vh - 20px);
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px 30px 0 30px;
}
h1, h2 {
    text-align: center;
    font-family: 'IBM Plex Serif', serif;
}

h2 {
    color: white;
}

.contenedor-flex {
    display: flex;
    border: 3px solid black;
    /* flex-direction: Por defecto es row (column) */
    flex-direction: row;
    /* Wrap : [nowrap, wrap, wrap-reverse] wrap se utiliza con flex-direction: row*/
    flex-wrap: wrap;
    /* flex-flow: <column/row> <nowrap/wrap/wrap-reverse>*/
    flex-flow: row wrap;
    

}

.elemento-flex {
    padding: 10px;
    /* flex-grow: es una propiedad para controlar que el tama침o sea m치s de los elementos hijos de un contenedor flexible*/
    flex-grow: 1;
}

.elemento-flex:nth-child(1) {
    background-color: #E53935;
    /* flex-order */
    order: 3;
    /* flex-shirnk: propiedad que controla que el tama침o sea mas chico de los elementos de un
    contendor padre */
    flex-grow: 0;
    flex-shrink: 0;
    /* flex-basis: es un propiedad que le asigna un tama침o minimo a un 
    elemento hijo de un contenedor flexible, es decir que minimo ese valor
    puede medir; se le pueden pasar valor de tipo px, %, rem, etc */
    flex-basis: 50%;
}

.elemento-flex:nth-child(2) {
    background-color: #8E24AA;
    /* flex-order */
    order: 1;
    flex-grow: 2;
}

.elemento-flex:nth-child(3) {
    background-color: #3F51B5;
    /* flex-order */
    order: 2;

    /* flex: <flex-grow> <flex-shirk> <flex-basis> */
    
}
/* Con media querys se visualiza mas el order de los elementos hijos de un
contenedor padre */
/* @media screen and (min-width:768px) {
    .elemento-flex:nth-child(3) {
        background-color: pink;
        order: -1;
    }
    .elemento-flex:nth-child(2) {
        background-color: brown;
        order: 3;
    }
} */

/* 
    Para alinear elemento de un contenedor padre de forma HORIZONTAL
    se utiliza la propiedad 
    'justify-content' 
    y puede tomar los siguientes valores
    1. flex-start
    2. flex-end
    3. center
    4. space-around
    5. space-between


    Para alinear elementos hijos de un contenedor flex de forma VERTICAL
    se utiliza la propiedad
    'align-items'
    y pueden tomar los siguientes valores
    1. initial
    2. flex-start
    2. flex-end
    3. baseline
    4. center

    Para alinear un elemento hijo especificamente se utiliza la 
    propiedad 'align-self', esta propiedad se debe colocar en el elemento hijo

*/